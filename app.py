import base64
import os
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.proxy import ProxyType, Proxy
from starlette.responses import Response


app = FastAPI()


@app.get("/")
def index_page():
    return {"status": "ok", "message": "WebpageScreenshotDriver 1.0"}

@app.get("/ping")
def ping_page():
    return {"status": "ok", "message": "pong"}

@app.get(
    "/image",

    # Set what the media type will be in the autogenerated OpenAPI specification.
    responses = {
        200: {
            "content": {"image/png": {}}
        }
    },

    response_class=Response
)
def get_image(url: str):
    try:
        chrome_options = Options()
        if os.environ.get("PROXY_SERVER", "") != "":
            proxy = Proxy()
            proxy.proxy_type = ProxyType.MANUAL
            proxy.http_proxy = os.environ.get("PROXY_SERVER")
            proxy.ssl_proxy = os.environ.get("PROXY_SERVER")
            chrome_options.proxy = proxy
        if os.environ.get("USER_AGENT", "") != "":
            chrome_options.add_argument("--user-agent='" + os.environ.get("USER_AGENT") + "'")
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("window-size=" + os.environ.get("WINDOW_SIZE", "1920,1080"))
        driver = webdriver.Remote(command_executor=os.environ.get("WEBDRIVER_URL", "http://webdriver:4444/wd/hub"),
                                  options=chrome_options)
    except Exception as ex:
        raise HTTPException(status_code=500, detail=str(ex))

    try:
        driver.get(url)
        screenshot_bytes = driver.get_screenshot_as_png()
        driver.quit()
        return Response(content=screenshot_bytes, media_type="image/png")
    except Exception as ex:
        driver.quit()
        raise HTTPException(status_code=500, detail=str(ex))